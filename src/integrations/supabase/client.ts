// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL ?? '';
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY ?? '';

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

const supabaseOptions = typeof window !== 'undefined' ? {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
} : undefined;

function createSafeStubClient() {
  const warn = () => console.warn("[supabase stub] Supabase client not initialized. Set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY for full functionality.");

  const asyncNoOp = async () => ({ data: null, error: null });

  return {
    auth: {
      onAuthStateChange: (cb: any) => {
        warn();
        // return object similar to real client: { data: { subscription } }
        return { data: { subscription: { unsubscribe: () => {} } } };
      },
      getSession: async () => {
        warn();
        return { data: { session: null } };
      },
      signOut: async () => {
        warn();
        return { error: null };
      },
      // Newer supabase-js auth methods
      signInWithPassword: async ({ email, password }: { email: string, password: string }) => {
        warn();
        // emulate failure if empty
        if (!email || !password) return { error: new Error('Missing credentials'), data: null };
        return { data: null, error: null };
      },
      signUp: async ({ email, password, options }: any) => {
        warn();
        if (!email || !password) return { error: new Error('Missing credentials'), data: null };
        return { data: null, error: null };
      },
      resend: async (_opts: any) => {
        warn();
        return { error: null };
      }
    },
    from: (_table: string) => ({
      select: async () => ({ data: null, error: null }),
      insert: async () => ({ data: null, error: null }),
      update: async () => ({ data: null, error: null }),
      delete: async () => ({ data: null, error: null }),
      upsert: async () => ({ data: null, error: null }),
      eq: () => ({ select: async () => ({ data: null, error: null }) })
    }),
    rpc: async () => ({ data: null, error: null }),
    channel: (_name: string) => ({
      on: () => ({ subscribe: async () => ({}) }),
      subscribe: async () => ({}),
      unsubscribe: async () => ({})
    })
  } as any;
}

export const supabase = (typeof window !== 'undefined' && SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY)
  ? createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, supabaseOptions)
  : createSafeStubClient();
