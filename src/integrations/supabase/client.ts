// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

export const SUPABASE_URL = "https://kdpqimetajnhcqseajok.supabase.co";
export const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtkcHFpbWV0YWpuaGNxc2Vham9rIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQwMDQxMTAsImV4cCI6MjA2OTU4MDExMH0.VkqXvocYAYO6RQeDaFv8wVrq2xoKKfQ8UVj41az7ZSk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Enhance functions.invoke with server fallback and detailed error reporting
try {
  const originalInvoke = (supabase.functions as any).invoke.bind(supabase.functions);
  (supabase.functions as any).invoke = async (name: string, options?: any) => {
    try {
      const result = await originalInvoke(name, options);
      if (result?.error) throw result.error;
      return result;
    } catch (err: any) {
      // Try server proxy fallback using service role
      try {
        const body = options?.body ?? {};
        const res = await fetch(`/api/edge/${name}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });
        const text = await res.text();
        let data: any; try { data = JSON.parse(text); } catch { data = text; }
        if (!res.ok) {
          return { data: null as any, error: { message: 'Edge function proxy error', status: res.status, details: data } };
        }
        return { data, error: null } as any;
      } catch (fallbackErr: any) {
        const parts: string[] = [];
        const e = fallbackErr || err;
        if (e?.message) parts.push(e.message);
        if (e?.details) parts.push(e.details);
        if (e?.hint) parts.push(`hint: ${e.hint}`);
        return { data: null as any, error: { message: parts.join(' | ') || String(e) } };
      }
    }
  };
} catch {}
